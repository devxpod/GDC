export ROOT_PW=${ROOT_PW:=ContainersRule} # sets root password in container

export USE_WORKSPACE=${USE_WORKSPACE:=yes}

export USE_AWS_HOME=${USE_AWS_HOME:=yes} # copy .aws folder from host home if exists and enables USE_HOST_HOME=yes
export USE_HOME_BIN=${USE_HOME_BIN:=no}  # copy bin folder from host home directory if it exists and  enables USE_HOST_HOME=yes

if [[ "$USE_HOME_BIN" = "yes" || "$USE_AWS_HOME" = "yes" ]]; then
  USE_HOST_HOME=yes
fi

export USE_HOST_HOME=${USE_HOST_HOME:=yes} # mount home directory from host

if [ -z ${PULUMI_VERSION+x} ]; then
  export PULUMI_VERSION=latest # install this version of pulumi by default
fi
if [ -z ${PHP_VERSION+x} ]; then
  export PHP_VERSION='' # available PHP versions 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1, 8.2
fi
if [ -z ${GOLANG_VERSION+x} ]; then
  export GOLANG_VERSION='1.18' # install this golang version. blank for none. latest is 1.18
fi

export USE_AWS=${USE_AWS:=yes} # install latest aws cli, ssm plugin, and ecr helper

if [[ -z "$AWS_VERSION" || "$AWS_VERSION" = "latest" ]]; then
  # latest version
  export AWS_VERSION=$(curl -s https://raw.githubusercontent.com/aws/aws-cli/v2/awscli/__init__.py | grep __version__ | cut -f3 -d' ' | tr -d "'")
  if [[ -z "$AWS_VERSION" ]]; then # if failed to fetch use known good version
    export AWS_VERSION=2.15.36
  fi
fi

if [[ -z ${PYTHON_VERSION+x} ]]; then
  export PYTHON_VERSION=3.11 # latest aws lambda supported runtime
fi

export USE_PRECOMMIT=${USE_PRECOMMIT:=no} # use pre-commit hooks in git to format and lint files
# pre-commit requires python and will enable it if needed
if [[ -z ${PYTHON_VERSION+x} && "$USE_PRECOMMIT" = "yes" ]]; then
  export PYTHON_VERSION=3.11 # install this python version
fi

export USE_BITWARDEN=${USE_BITWARDEN:=yes}                        # enable bitwarden workflow helpers. requires node install
export PERSIST_BITWARDEN_SESSION=${PERSIST_BITWARDEN_SESSION:=no} # persist unlocked vault creds between container sessions

export USE_CDK=${USE_CDK:=$USE_AWS}  # install latest aws cdk, terraform and cdk for terraform. requires node install

# if bitwarden is enabled, ensure node is also enabled
if [[ "$USE_BITWARDEN" = "yes" && -z "$NODE_VERSION" ]]; then
  export NODE_VERSION=18 # install this version of node.
fi

# if cdk is enabled, ensure node is also enabled
if [[ "$USE_CDK" = "yes" && -z "$NODE_VERSION" ]]; then
  export NODE_VERSION=18 # install this version of node.
fi


if [ -n "$LOCALSTACK_API_KEY" ] || [ -n "$LOCALSTACK_AUTH_TOKEN" ]; then
  export LS_IMAGE=${LS_IMAGE:="localstack/localstack-pro"} # use pro image if API key is provided
else
  export LS_IMAGE=${LS_IMAGE:="localstack/localstack"} # can override with custom image location. Still uses LS_VERSION to create final image location.
fi
export LS_VERSION                                                   # starts requested localstack container version
export USE_LOCALSTACK=${USE_LOCALSTACK:=yes}                        # does not install or start localstack. Only sets up some helpers
export USE_LOCALSTACK_PERSISTENCE=${USE_LOCALSTACK_PERSISTENCE:=no} # toggle persistent storage for LS defaults to persistence disabled.
export USE_LOCALSTACK_HOST=${USE_LOCALSTACK_HOST:=yes}              # does not install or start localstack. Only sets up some helpers and port forwards
if [ -z ${LOCALSTACK_HOST_DNS_PORT+x} ]; then
  LOCALSTACK_HOST_DNS_PORT=53 # forward this port from host to localstack for DNS
fi
export USE_LOCALSTACK_SHARED=${USE_LOCALSTACK_SHARED:=no} # mount shared volume in LS container under /shared
export LOCALSTACK_HOST_DNS_PORT
export LOCALSTACK_GATEWAY_LISTEN
export USE_LOCALSTACK_DNS=${USE_LOCALSTACK_DNS:=no} # set to yes to assign static ip to LS container and use it as primary DNS

export USE_AUTH0                                             # starts up auth0 mock container in container only mode
export USE_AUTH0_HOST                                        # starts up auth0 mock container and forwards port from host. Use AUTH0_HOST_PORT to change default of 3001
export AUTH0_HOST_PORT=${AUTH0_HOST_PORT:=3001}              # default port for AUTH0 mock if enabled
export AUTH0_LOCAL_USERS_FILE                                # used to specify location in container for auth0 to mount user override file
export AUTH0_DEFAULT_USER=${AUTH0_DEFAULT_USER:="user1"}     # used to auto-populate auth0 mock login page
export AUTH0_DEFAULT_PASSWORD=${AUTH0_DEFAULT_USER:="user1"} # used to auto-populate auth0 mock login page

export USE_DOT_NET # install ubuntu:latest dotnet core packages
export USE_JAVA    # install ubuntu:latest openjdk packages

export EDITOR=${EDITOR:=vi} # sets default editor in container. usually set to same as VISUAL
export VISUAL=${VISUAL:=vi} # sets default editor in container. usually set to same as EDITOR
if [ -z ${SSH_KEYSCAN_HOSTS+x} ]; then
  export SSH_KEYSCAN_HOSTS="gitlab.com github.com bitbucket.org" # copy ssh keys from these hosts to prevent unknown key prompts
fi

# default secondary dns to google secondary dns if not specified
if [ -z "$GDC_DNS_SEC_IP" ]; then
  GDC_DNS_SEC_IP=8.8.4.4
fi

# these will only be used by the container if GDC_DNS_PRI_IP is defined
export GDC_DNS_PRI_IP
export GDC_DNS_SEC_IP

export DEVNET_GATEWAY

export USE_COLOR_PROMPT=${USE_COLOR_PROMPT:=yes} # enable colored bash prompt

export CHECK_UPDATES=${CHECK_UPDATES:=yes}   # check for updates on each login
export SHARED_VOLUMES                        # specify volume names to create and share across all GDC's
export GDC_RUN_MODE=${GDC_RUN_MODE:="start"} # options are start, stop, daemon

export DEV_CONTAINER_NAME=${DEV_CONTAINER_NAME:="dev-1"} # dev container name

export COPY_CMD_TO_CLIPBOARD=${COPY_CMD_TO_CLIPBOARD:=yes} # COPY GDC shell launch command to clipboard

export USE_PROXY_HOST=${USE_PROXY_HOST:=no}                # no, proxy, dump, web
export PROXY_VERSION=${PROXY_VERSION:=latest}              # container image version tag
export PROXY_CONTAINER_NAME=${PROXY_CONTAINER_NAME:=proxy} # name of the container
export PROXY_HOST_PORT=${PROXY_HOST_PORT:=8080}            # port to expose to host
export PROXY_WEB_HOST_PORT=${PROXY_WEB_HOST_PORT:=8081}    # if running in web mode expose this port
export PROXY_VOLUME_DIR=${PROXY_VOLUME_DIR:=/tmp/mitproxy} # volume to persist certs to
export PROXY_AUTO_EXPORT_ENV=${PROXY_AUTO_EXPORT_ENV:=no}  # auto export HTTP_PROXY and HTTPS_PROXY
